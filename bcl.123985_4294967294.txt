gpu-07
wandb: Currently logged in as: mai-cs. Use `wandb login --relogin` to force relogin
wandb: wandb version 0.14.0 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.13.11
wandb: Run data is saved locally in /home/mai.kassem/sources/Balanced-Contrastive-Learning/wandb/run-20230315_165540-4oaqi1j9
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run isic_resnet50_batchsize_110_epochs_1000_temp_0.07_lr_0.05_sim-sim_alpha_1.0_beta_0.35_schedule_[860, 880]_recalibrate_False_Salwa_ce_loss_LC_aoudqc
wandb: ⭐️ View project at https://wandb.ai/mai-cs/isic
wandb: 🚀 View run at https://wandb.ai/mai-cs/isic/runs/4oaqi1j9
storing name: isic_resnet50_batchsize_110_epochs_1000_temp_0.07_lr_0.05_sim-sim_alpha_1.0_beta_0.35_schedule_[860, 880]_recalibrate_False_Salwa_ce_loss_LC_aoudqc
Wandb initialized
cls_num_list [1113, 6705, 514, 327, 1099, 115, 142]
cls_num 7
=> creating model 'resnet50'
BCLModel(
  (encoder): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  )
  (head): Sequential(
    (0): Linear(in_features=2048, out_features=2048, bias=True)
    (1): BatchNorm1d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Linear(in_features=2048, out_features=1024, bias=True)
  )
  (fc): NormedLinear()
  (head_fc): Sequential(
    (0): Linear(in_features=2048, out_features=2048, bias=True)
    (1): BatchNorm1d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Linear(in_features=2048, out_features=1024, bias=True)
  )
)
[INFO] number of parameters:  36119616
=> using all available GPUs
[INFO] Using Logit Compensation with cross entropy loss
  0%|          | 0/92 [00:00<?, ?it/s]  1%|          | 1/92 [00:31<47:25, 31.27s/it]  2%|▏         | 2/92 [00:31<19:35, 13.06s/it]  3%|▎         | 3/92 [00:31<10:48,  7.28s/it]  4%|▍         | 4/92 [00:32<06:41,  4.57s/it]  5%|▌         | 5/92 [00:33<04:36,  3.17s/it]  7%|▋         | 6/92 [00:33<03:08,  2.20s/it]  8%|▊         | 7/92 [00:33<02:17,  1.62s/it]  9%|▊         | 8/92 [00:34<01:43,  1.23s/it] 10%|▉         | 9/92 [00:34<01:20,  1.03it/s] 11%|█         | 10/92 [00:35<01:17,  1.06it/s] 12%|█▏        | 11/92 [00:35<00:59,  1.35it/s] 13%|█▎        | 12/92 [00:36<00:51,  1.57it/s] 14%|█▍        | 13/92 [00:36<00:44,  1.77it/s] 15%|█▌        | 14/92 [00:36<00:40,  1.94it/s] 16%|█▋        | 15/92 [00:37<00:43,  1.76it/s] 17%|█▋        | 16/92 [00:37<00:36,  2.07it/s] 18%|█▊        | 17/92 [00:38<00:34,  2.19it/s] 20%|█▉        | 18/92 [00:38<00:32,  2.26it/s] 21%|██        | 19/92 [00:39<00:31,  2.32it/s] 22%|██▏       | 20/92 [00:39<00:36,  1.97it/s] 23%|██▎       | 21/92 [00:40<00:31,  2.27it/s] 24%|██▍       | 22/92 [00:40<00:29,  2.34it/s] 25%|██▌       | 23/92 [00:40<00:29,  2.38it/s] 26%|██▌       | 24/92 [00:41<00:28,  2.40it/s] 27%|██▋       | 25/92 [00:42<00:34,  1.95it/s] 28%|██▊       | 26/92 [00:42<00:29,  2.25it/s] 29%|██▉       | 27/92 [00:42<00:28,  2.30it/s] 30%|███       | 28/92 [00:43<00:27,  2.34it/s] 32%|███▏      | 29/92 [00:43<00:26,  2.35it/s] 33%|███▎      | 30/92 [00:44<00:34,  1.82it/s] 34%|███▎      | 31/92 [00:44<00:28,  2.12it/s] 35%|███▍      | 32/92 [00:45<00:27,  2.22it/s] 36%|███▌      | 33/92 [00:45<00:25,  2.28it/s] 37%|███▋      | 34/92 [00:45<00:24,  2.34it/s] 38%|███▊      | 35/92 [00:46<00:29,  1.94it/s] 39%|███▉      | 36/92 [00:46<00:25,  2.24it/s] 40%|████      | 37/92 [00:47<00:23,  2.31it/s] 41%|████▏     | 38/92 [00:47<00:22,  2.36it/s] 42%|████▏     | 39/92 [00:48<00:22,  2.40it/s] 43%|████▎     | 40/92 [00:48<00:26,  1.98it/s] 45%|████▍     | 41/92 [00:49<00:22,  2.26it/s] 46%|████▌     | 42/92 [00:49<00:21,  2.32it/s] 47%|████▋     | 43/92 [00:49<00:20,  2.36it/s] 48%|████▊     | 44/92 [00:50<00:19,  2.40it/s] 49%|████▉     | 45/92 [00:51<00:23,  2.00it/s] 50%|█████     | 46/92 [00:51<00:20,  2.24it/s] 51%|█████     | 47/92 [00:51<00:19,  2.30it/s] 52%|█████▏    | 48/92 [00:52<00:18,  2.36it/s] 53%|█████▎    | 49/92 [00:52<00:17,  2.40it/s] 54%|█████▍    | 50/92 [00:53<00:21,  1.91it/s] 55%|█████▌    | 51/92 [00:53<00:18,  2.18it/s] 57%|█████▋    | 52/92 [00:54<00:17,  2.26it/s] 58%|█████▊    | 53/92 [00:54<00:18,  2.14it/s] 59%|█████▊    | 54/92 [00:55<00:16,  2.25it/s] 60%|█████▉    | 55/92 [00:55<00:18,  1.98it/s] 61%|██████    | 56/92 [00:55<00:15,  2.34it/s] 62%|██████▏   | 57/92 [00:56<00:14,  2.38it/s] 63%|██████▎   | 58/92 [00:56<00:14,  2.41it/s] 64%|██████▍   | 59/92 [00:57<00:13,  2.43it/s] 65%|██████▌   | 60/92 [00:57<00:15,  2.03it/s] 66%|██████▋   | 61/92 [00:58<00:13,  2.35it/s] 67%|██████▋   | 62/92 [00:58<00:12,  2.39it/s] 68%|██████▊   | 63/92 [00:58<00:11,  2.42it/s] 70%|██████▉   | 64/92 [00:59<00:11,  2.43it/s] 71%|███████   | 65/92 [00:59<00:13,  2.03it/s] 72%|███████▏  | 66/92 [01:00<00:11,  2.36it/s] 73%|███████▎  | 67/92 [01:00<00:10,  2.40it/s] 74%|███████▍  | 68/92 [01:01<00:09,  2.43it/s] 75%|███████▌  | 69/92 [01:01<00:09,  2.45it/s] 76%|███████▌  | 70/92 [01:02<00:10,  2.05it/s] 77%|███████▋  | 71/92 [01:02<00:08,  2.39it/s] 78%|███████▊  | 72/92 [01:02<00:08,  2.42it/s] 79%|███████▉  | 73/92 [01:03<00:07,  2.44it/s] 80%|████████  | 74/92 [01:03<00:07,  2.46it/s] 82%|████████▏ | 75/92 [01:04<00:08,  2.04it/s] 83%|████████▎ | 76/92 [01:04<00:06,  2.39it/s] 84%|████████▎ | 77/92 [01:04<00:06,  2.42it/s] 85%|████████▍ | 78/92 [01:05<00:05,  2.44it/s] 86%|████████▌ | 79/92 [01:05<00:05,  2.45it/s] 87%|████████▋ | 80/92 [01:06<00:05,  2.04it/s] 88%|████████▊ | 81/92 [01:06<00:04,  2.38it/s] 89%|████████▉ | 82/92 [01:07<00:04,  2.41it/s] 90%|█████████ | 83/92 [01:07<00:03,  2.43it/s] 91%|█████████▏| 84/92 [01:07<00:03,  2.44it/s] 92%|█████████▏| 85/92 [01:08<00:03,  2.04it/s] 93%|█████████▎| 86/92 [01:08<00:02,  2.40it/s] 95%|█████████▍| 87/92 [01:09<00:02,  2.43it/s] 96%|█████████▌| 88/92 [01:09<00:01,  2.44it/s] 97%|█████████▋| 89/92 [01:09<00:01,  2.46it/s] 98%|█████████▊| 90/92 [01:10<00:00,  2.04it/s] 99%|█████████▉| 91/92 [01:10<00:00,  2.40it/s]100%|██████████| 92/92 [01:11<00:00,  2.16it/s]100%|██████████| 92/92 [01:11<00:00,  1.28it/s]
torch.Size([110, 3, 224, 224])
torch.Size([110, 3, 224, 224])

Epoch: [0][91/92] 	Time 0.575 (0.777)	CE_Loss 0.7223 (2.2306)	SCL_Loss 1.0416 (1.8960)	F1 score 0.0000 (0.0842)	Prec@1 0.000 (20.419)
  0%|          | 0/2 [00:00<?, ?it/s] 50%|█████     | 1/2 [00:02<00:02,  2.67s/it]100%|██████████| 2/2 [00:02<00:00,  1.27s/it]100%|██████████| 2/2 [00:03<00:00,  1.55s/it]
/home/mai.kassem/sources/Balanced-Contrastive-Learning/main.py:938: UserWarning: The palette list has more values (10) than needed (6), which may not be intended.
  sns.scatterplot(
Test: [1/2]	Time 2.960 (2.814)	CE_Loss 1.0278 (1.1237)	F1 score 0.0668 (0.0663)	Prec@1 19.277 (19.171)
many shot count:  3
median shot count:  2
low shot count:  2
features shape: torch.Size([110, 1024])
generating t-SNE plot...
(110,)
(110, 1024)
done!
Best Prec@1: 19.171, Corresponding: F1 Score: 0.066, Many Prec@1: 0.092, Med Prec@1: 0.000, Few Prec@1: 0.500
  0%|          | 0/92 [00:00<?, ?it/s]  1%|          | 1/92 [00:10<16:07, 10.63s/it]  2%|▏         | 2/92 [00:11<06:56,  4.63s/it]  3%|▎         | 3/92 [00:11<04:13,  2.85s/it]  4%|▍         | 4/92 [00:12<02:43,  1.85s/it]  5%|▌         | 5/92 [00:12<01:56,  1.33s/it]  7%|▋         | 6/92 [00:12<01:27,  1.02s/it]  8%|▊         | 7/92 [00:13<01:09,  1.22it/s]  9%|▊         | 8/92 [00:14<01:07,  1.24it/s] 10%|▉         | 9/92 [00:14<00:54,  1.53it/s] 11%|█         | 10/92 [00:14<00:47,  1.73it/s] 12%|█▏        | 11/92 [00:15<00:42,  1.89it/s] 13%|█▎        | 12/92 [00:15<00:39,  2.00it/s] 14%|█▍        | 13/92 [00:16<00:54,  1.44it/s] 15%|█▌        | 14/92 [00:17<00:45,  1.72it/s] 16%|█▋        | 15/92 [00:17<00:41,  1.87it/s] 17%|█▋        | 16/92 [00:17<00:36,  2.08it/s] 18%|█▊        | 17/92 [00:18<00:34,  2.18it/s] 20%|█▉        | 18/92 [00:19<00:50,  1.46it/s] 21%|██        | 19/92 [00:19<00:42,  1.73it/s] 22%|██▏       | 20/92 [00:20<00:38,  1.88it/s] 23%|██▎       | 21/92 [00:20<00:34,  2.06it/s] 24%|██▍       | 22/92 [00:21<00:32,  2.16it/s] 25%|██▌       | 23/92 [00:21<00:36,  1.88it/s] 26%|██▌       | 24/92 [00:22<00:31,  2.19it/s] 27%|██▋       | 25/92 [00:22<00:29,  2.27it/s] 28%|██▊       | 26/92 [00:22<00:28,  2.34it/s] 29%|██▉       | 27/92 [00:23<00:27,  2.38it/s] 30%|███       | 28/92 [00:24<00:33,  1.91it/s] 32%|███▏      | 29/92 [00:24<00:28,  2.22it/s] 33%|███▎      | 30/92 [00:24<00:26,  2.31it/s] 34%|███▎      | 31/92 [00:25<00:25,  2.36it/s] 35%|███▍      | 32/92 [00:25<00:24,  2.40it/s] 36%|███▌      | 33/92 [00:26<00:29,  2.00it/s] 37%|███▋      | 34/92 [00:26<00:24,  2.37it/s] 38%|███▊      | 35/92 [00:26<00:23,  2.40it/s] 39%|███▉      | 36/92 [00:27<00:23,  2.43it/s] 40%|████      | 37/92 [00:27<00:22,  2.44it/s] 41%|████▏     | 38/92 [00:28<00:26,  2.03it/s] 42%|████▏     | 39/92 [00:28<00:22,  2.40it/s] 43%|████▎     | 40/92 [00:28<00:21,  2.43it/s] 45%|████▍     | 41/92 [00:29<00:20,  2.45it/s] 46%|████▌     | 42/92 [00:29<00:20,  2.45it/s] 47%|████▋     | 43/92 [00:30<00:24,  2.04it/s] 48%|████▊     | 44/92 [00:30<00:20,  2.39it/s] 49%|████▉     | 45/92 [00:31<00:19,  2.42it/s] 50%|█████     | 46/92 [00:31<00:18,  2.44it/s] 51%|█████     | 47/92 [00:31<00:18,  2.45it/s] 52%|█████▏    | 48/92 [00:32<00:21,  2.05it/s] 53%|█████▎    | 49/92 [00:32<00:17,  2.42it/s] 54%|█████▍    | 50/92 [00:33<00:17,  2.43it/s] 55%|█████▌    | 51/92 [00:33<00:16,  2.44it/s] 57%|█████▋    | 52/92 [00:34<00:16,  2.46it/s] 58%|█████▊    | 53/92 [00:34<00:19,  2.05it/s] 59%|█████▊    | 54/92 [00:34<00:15,  2.40it/s] 60%|█████▉    | 55/92 [00:35<00:15,  2.42it/s] 61%|██████    | 56/92 [00:35<00:14,  2.44it/s] 62%|██████▏   | 57/92 [00:36<00:14,  2.46it/s] 63%|██████▎   | 58/92 [00:36<00:16,  2.05it/s] 64%|██████▍   | 59/92 [00:37<00:13,  2.40it/s] 65%|██████▌   | 60/92 [00:37<00:13,  2.41it/s] 66%|██████▋   | 61/92 [00:37<00:12,  2.43it/s] 67%|██████▋   | 62/92 [00:38<00:12,  2.44it/s] 68%|██████▊   | 63/92 [00:39<00:14,  2.04it/s] 70%|██████▉   | 64/92 [00:39<00:11,  2.39it/s] 71%|███████   | 65/92 [00:39<00:11,  2.42it/s] 72%|███████▏  | 66/92 [00:40<00:10,  2.44it/s] 73%|███████▎  | 67/92 [00:40<00:10,  2.45it/s] 74%|███████▍  | 68/92 [00:41<00:11,  2.05it/s] 75%|███████▌  | 69/92 [00:41<00:09,  2.40it/s] 76%|███████▌  | 70/92 [00:41<00:09,  2.41it/s] 77%|███████▋  | 71/92 [00:42<00:08,  2.43it/s] 78%|███████▊  | 72/92 [00:42<00:08,  2.39it/s] 79%|███████▉  | 73/92 [00:43<00:09,  2.01it/s] 80%|████████  | 74/92 [00:43<00:07,  2.37it/s] 82%|████████▏ | 75/92 [00:43<00:07,  2.41it/s] 83%|████████▎ | 76/92 [00:44<00:06,  2.43it/s] 84%|████████▎ | 77/92 [00:44<00:06,  2.44it/s] 85%|████████▍ | 78/92 [00:45<00:07,  1.98it/s] 86%|████████▌ | 79/92 [00:45<00:05,  2.32it/s] 87%|████████▋ | 80/92 [00:46<00:05,  2.36it/s] 88%|████████▊ | 81/92 [00:46<00:04,  2.39it/s] 89%|████████▉ | 82/92 [00:46<00:04,  2.42it/s] 90%|█████████ | 83/92 [00:47<00:04,  2.02it/s] 91%|█████████▏| 84/92 [00:47<00:03,  2.36it/s] 92%|█████████▏| 85/92 [00:48<00:02,  2.39it/s] 93%|█████████▎| 86/92 [00:48<00:02,  2.43it/s] 95%|█████████▍| 87/92 [00:49<00:02,  2.45it/s] 96%|█████████▌| 88/92 [00:49<00:01,  2.03it/s] 97%|█████████▋| 89/92 [00:50<00:01,  2.37it/s] 98%|█████████▊| 90/92 [00:50<00:00,  2.37it/s] 99%|█████████▉| 91/92 [00:50<00:00,  2.40it/s]100%|██████████| 92/92 [00:51<00:00,  2.77it/s]100%|██████████| 92/92 [00:51<00:00,  1.79it/s]
torch.Size([110, 3, 224, 224])
torch.Size([110, 3, 224, 224])

Epoch: [1][91/92] 	Time 0.231 (0.556)	CE_Loss 0.6370 (1.1312)	SCL_Loss 1.1600 (1.8211)	F1 score 0.3333 (0.1063)	Prec@1 80.000 (24.094)
  0%|          | 0/2 [00:00<?, ?it/s] 50%|█████     | 1/2 [00:02<00:02,  2.65s/it]100%|██████████| 2/2 [00:02<00:00,  1.41s/it]
/home/mai.kassem/sources/Balanced-Contrastive-Learning/main.py:938: UserWarning: The palette list has more values (10) than needed (7), which may not be intended.
  sns.scatterplot(
Test: [1/2]	Time 2.684 (2.665)	CE_Loss 0.9839 (1.0540)	F1 score 0.1278 (0.1087)	Prec@1 28.916 (30.052)
many shot count:  3
median shot count:  2
low shot count:  2
features shape: torch.Size([110, 1024])
generating t-SNE plot...
(110,)
(110, 1024)
done!
Best Prec@1: 30.052, Corresponding: F1 Score: 0.109, Many Prec@1: 0.149, Med Prec@1: 0.000, Few Prec@1: 0.500
  0%|          | 0/92 [00:00<?, ?it/s]  1%|          | 1/92 [00:05<08:55,  5.88s/it]  2%|▏         | 2/92 [00:06<04:16,  2.85s/it]  3%|▎         | 3/92 [00:07<02:35,  1.74s/it]  4%|▍         | 4/92 [00:07<01:47,  1.22s/it]  5%|▌         | 5/92 [00:07<01:20,  1.08it/s]  7%|▋         | 6/92 [00:08<01:16,  1.12it/s]  8%|▊         | 7/92 [00:09<01:02,  1.35it/s]  9%|▊         | 8/92 [00:09<00:53,  1.57it/s] 10%|▉         | 9/92 [00:09<00:46,  1.77it/s] 11%|█         | 10/92 [00:10<00:42,  1.94it/s] 12%|█▏        | 11/92 [00:11<00:47,  1.71it/s] 13%|█▎        | 12/92 [00:11<00:39,  2.02it/s] 14%|█▍        | 13/92 [00:11<00:36,  2.14it/s] 15%|█▌        | 14/92 [00:12<00:35,  2.22it/s] 16%|█▋        | 15/92 [00:12<00:33,  2.29it/s] 17%|█▋        | 16/92 [00:13<00:38,  1.96it/s] 18%|█▊        | 17/92 [00:13<00:33,  2.26it/s] 20%|█▉        | 18/92 [00:13<00:32,  2.30it/s] 21%|██        | 19/92 [00:14<00:30,  2.36it/s] 22%|██▏       | 20/92 [00:14<00:30,  2.39it/s] 23%|██▎       | 21/92 [00:15<00:35,  2.00it/s] 24%|██▍       | 22/92 [00:15<00:30,  2.30it/s] 25%|██▌       | 23/92 [00:16<00:29,  2.37it/s] 26%|██▌       | 24/92 [00:16<00:28,  2.39it/s] 27%|██▋       | 25/92 [00:16<00:27,  2.41it/s] 28%|██▊       | 26/92 [00:17<00:33,  1.99it/s] 29%|██▉       | 27/92 [00:17<00:28,  2.28it/s] 30%|███       | 28/92 [00:18<00:27,  2.35it/s] 32%|███▏      | 29/92 [00:18<00:26,  2.39it/s] 33%|███▎      | 30/92 [00:19<00:25,  2.43it/s] 34%|███▎      | 31/92 [00:19<00:30,  2.01it/s] 35%|███▍      | 32/92 [00:20<00:25,  2.33it/s] 36%|███▌      | 33/92 [00:20<00:24,  2.37it/s] 37%|███▋      | 34/92 [00:20<00:24,  2.41it/s] 38%|███▊      | 35/92 [00:21<00:23,  2.43it/s] 39%|███▉      | 36/92 [00:21<00:27,  2.03it/s] 40%|████      | 37/92 [00:22<00:23,  2.39it/s] 41%|████▏     | 38/92 [00:22<00:22,  2.41it/s] 42%|████▏     | 39/92 [00:23<00:21,  2.44it/s] 43%|████▎     | 40/92 [00:23<00:21,  2.46it/s] 45%|████▍     | 41/92 [00:24<00:24,  2.05it/s] 46%|████▌     | 42/92 [00:24<00:20,  2.41it/s] 47%|████▋     | 43/92 [00:24<00:20,  2.44it/s] 48%|████▊     | 44/92 [00:25<00:19,  2.46it/s] 49%|████▉     | 45/92 [00:25<00:18,  2.47it/s] 50%|█████     | 46/92 [00:26<00:22,  2.07it/s] 51%|█████     | 47/92 [00:26<00:18,  2.45it/s] 52%|█████▏    | 48/92 [00:26<00:17,  2.47it/s] 53%|█████▎    | 49/92 [00:27<00:17,  2.48it/s] 54%|█████▍    | 50/92 [00:27<00:16,  2.49it/s] 55%|█████▌    | 51/92 [00:28<00:19,  2.07it/s] 57%|█████▋    | 52/92 [00:28<00:16,  2.41it/s] 58%|█████▊    | 53/92 [00:28<00:16,  2.43it/s] 59%|█████▊    | 54/92 [00:29<00:15,  2.45it/s] 60%|█████▉    | 55/92 [00:29<00:15,  2.46it/s] 61%|██████    | 56/92 [00:30<00:17,  2.05it/s] 62%|██████▏   | 57/92 [00:30<00:14,  2.42it/s] 63%|██████▎   | 58/92 [00:31<00:13,  2.44it/s] 64%|██████▍   | 59/92 [00:31<00:13,  2.46it/s] 65%|██████▌   | 60/92 [00:31<00:13,  2.41it/s] 66%|██████▋   | 61/92 [00:32<00:16,  1.93it/s] 67%|██████▋   | 62/92 [00:32<00:13,  2.29it/s] 68%|██████▊   | 63/92 [00:33<00:12,  2.36it/s] 70%|██████▉   | 64/92 [00:33<00:11,  2.40it/s] 71%|███████   | 65/92 [00:34<00:11,  2.43it/s] 72%|███████▏  | 66/92 [00:34<00:12,  2.01it/s] 73%|███████▎  | 67/92 [00:35<00:10,  2.39it/s] 74%|███████▍  | 68/92 [00:35<00:09,  2.42it/s] 75%|███████▌  | 69/92 [00:35<00:09,  2.44it/s] 76%|███████▌  | 70/92 [00:36<00:08,  2.46it/s] 77%|███████▋  | 71/92 [00:36<00:10,  2.01it/s] 78%|███████▊  | 72/92 [00:37<00:08,  2.36it/s] 79%|███████▉  | 73/92 [00:37<00:07,  2.40it/s] 80%|████████  | 74/92 [00:38<00:07,  2.42it/s] 82%|████████▏ | 75/92 [00:38<00:06,  2.44it/s] 83%|████████▎ | 76/92 [00:39<00:07,  2.06it/s] 84%|████████▎ | 77/92 [00:39<00:06,  2.42it/s] 85%|████████▍ | 78/92 [00:39<00:05,  2.43it/s] 86%|████████▌ | 79/92 [00:40<00:05,  2.45it/s] 87%|████████▋ | 80/92 [00:40<00:04,  2.46it/s] 88%|████████▊ | 81/92 [00:41<00:05,  2.04it/s] 89%|████████▉ | 82/92 [00:41<00:04,  2.38it/s] 90%|█████████ | 83/92 [00:41<00:03,  2.41it/s] 91%|█████████▏| 84/92 [00:42<00:03,  2.43it/s] 92%|█████████▏| 85/92 [00:42<00:02,  2.44it/s] 93%|█████████▎| 86/92 [00:43<00:02,  2.03it/s] 95%|█████████▍| 87/92 [00:43<00:02,  2.40it/s] 96%|█████████▌| 88/92 [00:44<00:01,  2.42it/s] 97%|█████████▋| 89/92 [00:44<00:01,  2.44it/s] 98%|█████████▊| 90/92 [00:44<00:00,  2.45it/s] 99%|█████████▉| 91/92 [00:45<00:00,  2.04it/s]100%|██████████| 92/92 [00:45<00:00,  2.01it/s]
torch.Size([110, 3, 224, 224])
torch.Size([110, 3, 224, 224])

Epoch: [2][91/92] 	Time 0.068 (0.496)	CE_Loss 0.8824 (1.1190)	SCL_Loss 1.1820 (1.8187)	F1 score 0.0000 (0.1036)	Prec@1 0.000 (23.175)
  0%|          | 0/2 [00:00<?, ?it/s] 50%|█████     | 1/2 [00:02<00:02,  2.05s/it]100%|██████████| 2/2 [00:02<00:00,  1.12s/it]
Test: [1/2]	Time 2.083 (2.064)	CE_Loss 1.0015 (1.0886)	F1 score 0.1662 (0.1556)	Prec@1 27.711 (26.943)
many shot count:  3
median shot count:  2
low shot count:  2
  0%|          | 0/92 [00:00<?, ?it/s]slurmstepd-gpu-07: error: *** JOB 123985 ON gpu-07 CANCELLED AT 2023-03-15T16:58:48 ***
